from db_config import create_connection  # Import the function from db_config.pyconn = create_connection()  # Create a connection object using the function from db_config.pyif conn:  # Check if the connection was successful    cursor = conn.cursor()    # You can now work with the cursor to execute queries and manage your databaseelse:    print("Connection failed.")    from datetime import datetime"""------------------------------------------------------"""def main_menu():    while True:        print("""              --- Main Menu ---              [1]. Add Task              [2]. View Tasks              [3]. Update Task              [4]. Remove Task              [5]. Quit Program              """)                      menu_choice = input("Enter your choice: ").strip()                if menu_choice == "1":            add_task()        elif menu_choice == "2":            view_tasks()        elif menu_choice == "3":            update_task()        elif menu_choice == "4":            remove_task()        elif menu_choice == "5":            print("Quitting progam...")            break        else:            print("Invalid input, please try again.")            def add_task():    conn = create_connection()    if not conn:        print("Failed to connect to database.")        return        cursor = conn.cursor()        title = input("Enter task title (type 'cancel' to cancel): ")    if title.strip().lower() == "cancel":        print("Process canceled.")        return        else:        while True:            due_date = input("Enter due date (YYYY-MM-DD): ")            try:                datetime.strptime(due_date, "%Y-%m-%d")                break            except ValueError:                print("Invalid date format. Please try again")                        priority = input("Enter priority (Low/Medium/High) or press Enter to skip: ").strip().lower()        if priority not in ["low", "medium", "high"]:            priority = None                sql = "INSERT INTO tasks (title, due_date, priority) VALUES (%s, %s, %s)"        cursor.execute(sql, (title, due_date, priority))        conn.commit()                print("Task added successfully.")                cursor.close()        conn.close()def view_tasks():    conn = create_connection()    if not conn:        print("Failed to connect to database.")        return        cursor = conn.cursor()        cursor.execute("SELECT task_id, title, status, due_date, priority FROM tasks")    tasks = cursor.fetchall()        if not tasks:        print("No tasks available.")    else:        print("\n--- Task List ---")        for task in tasks:            task_id, title, status, due_date, priority = task            print(f"[{task_id}] {title} - {status} - Due: {due_date} - Priority: {priority or 'None'}")                cursor.close()    conn.close()def update_task():    conn = create_connection()    if not conn:        print("Failed to connect to database.")        return        cursor = conn.cursor()        view_tasks()        while True:        task_id = input("Enter Task ID to update (type 'cancel' to cancel): ").strip()                if task_id.lower() == "cancel":            print("Process canceled.")            return                if task_id.isdigit():            cursor.execute("SELECT * FROM tasks WHERE task_id = %s", (int(task_id),))            task = cursor.fetchone()            if task:                break            else:                print("Task ID not found, please try again.")        else:            print("Invalid Task ID. Please enter a numeric ID.")        print("""Information to update:          [1]. Title          [2]. Due Date          [3]. Status          [4]. Priority          """)    choice = input("Enter your choice: ").strip()        if choice == "1":        new_value = input("Enter new title: ").strip()        column = "title"    elif choice == "2":        while True:            new_value = input("Enter new due date (YYYY-MM-DD): ").strip()            try:                datetime.strptime(new_value, "%Y-%m-%d")                break            except ValueError:                print("Invalid date format. Please try again")        column  = "due_date"    elif choice == "3":        while True:            new_value = input("Enter updated status (pending/completed): ").strip().lower()            if new_value in ["pending", "completed"]:                break            print("Invalid input, please try again.")        column = "status"    elif choice == "4":        while True:            new_value = input("Enter updated priority (Low/Medium/High): ").strip().lower()            if new_value in ["low", "medium", "high"]:                break            elif new_value == "":                new_value = None                break            else:                print("Invalid input, please try again.")        column = "priority"    sql = f"UPDATE tasks SET {column} = %s WHERE task_id = %s"    cursor.execute(sql, (new_value, int(task_id)))    conn.commit()        print("Task updated successfully")        cursor.close()    conn.close()    def remove_task():    conn = create_connection()    if not conn:        print("Failed to connect to database.")        return        cursor = conn.cursor()        view_tasks()        while True:        task_id = input("Enter Task ID to delete (type 'cancel' to cancel): ").strip()                if task_id.lower() == "cancel":            return                if task_id.isdigit():            cursor.execute("SELECT * FROM tasks WHERE task_id = %s", (int(task_id),))            task = cursor.fetchone()            if task:                break            else:                print("Task ID not found, please try again.")        else:            print("Invalid Task ID, please enter a numeric value.")                while True:        confirm = input("Type 'confirm' to delete, or 'cancel' to cancel: ").strip().lower()        if confirm == "confirm":            sql = "DELETE FROM tasks WHERE task_id = %s"            cursor.execute(sql, (task_id,))            conn.commit()            print("Task deleted successfully.")            break        elif confirm == "cancel":            print("Process canceled.")            break        else:            print("Invalid input. Please type 'confirm' or 'cancel'.")        cursor.close()    conn.close()        main_menu()